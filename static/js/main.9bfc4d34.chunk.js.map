{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","theme","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","changeTheme","role","htmlFor","placeholder","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","heading","value","style","backgroundColor","color","onChange","event","target","rows","btnClr","newText","toUpperCase","showAlert","toLowerCase","text1","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","about","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setTheme","_useState3","_useState4","setAlert","_useState5","_useState6","setBtnClr","body","components_Alert","message","setTimeout","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.9bfc4d34.chunk.js","sourcesContent":["import React from 'react'\r\nimport propTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props)\r\n{\r\n  return (\r\n\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.theme} bg-${props.theme}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\"><b>{props.title}</b></a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/about\">{props.about}</Link>\r\n            </li> */}\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.theme==='info'?'dark':'light'} mx-2`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" onClick={props.changeTheme} role=\"Routes\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Theme</label>\r\n          </div>\r\n          <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\"  aria-label=\"Search\"/>\r\n            <button className={props.theme===\"info\"?\"btn btn-primary\":\"btn btn-secondary\"} type=\"submit\">Search</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title : propTypes.string.isRequired,      // isRequired: must pass the props from App.js\r\n  about: propTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {         // In case props are not passed from App.js\r\n  title : \"Default Title\",\r\n  about: \"Default About\"\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props){\r\n\r\n    const [text, setText] = useState(\"\"); // default value of text variable i.e. \"\"\r\n    // text = \"Some new Text\";  // Wrong way to update state variable\r\n    // setText(\"some new Text\");  // Correct way to update state variable\r\n    const ConvertToUppercase = ()=>{\r\n        if(text)\r\n        {\r\n            // console.log(\"Converted to Upper case!\")\r\n            let newText = text.toUpperCase();\r\n            setText(newText)\r\n            props.showAlert(\"success\",\"Converted to Uppercase!\")\r\n        }\r\n        else{\r\n            props.showAlert(\"warning\", \"Please enter the Text first!\")\r\n        }\r\n    }\r\n    const ConvertToLowercase = ()=>{\r\n        if(text)\r\n        {\r\n            // console.log(\"Converted to Lower case!\")\r\n            let newText = text.toLowerCase();\r\n            setText(newText)\r\n            props.showAlert(\"success\",\"Converted to Lowercase!\")\r\n        }\r\n        \r\n        else{\r\n            props.showAlert(\"warning\", \"Please enter the Text first!\")\r\n        }\r\n\r\n    }\r\n    const clearText = ()=>{\r\n        // console.log(\"Text cleared\")\r\n        let newText = '';\r\n        setText(newText)\r\n        props.showAlert(\"success\",\"Text is cleared!\")\r\n\r\n    }\r\n    const Copy_Text = ()=> {\r\n        let text1 = document.getElementById(\"TextBox\");\r\n        text1.select();\r\n        navigator.clipboard.writeText(text1.value);\r\n        props.showAlert(\"success\",\"Text is copied to Clipboard!\")\r\n\r\n    }\r\n\r\n    const RemoveExtraSpace = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        // console.log(newText);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"success\",\"Extra Spaces are removed!\")\r\n\r\n    }\r\n\r\n\r\n    const updateText = (event)=>{\r\n        // console.log(\"Text updated\")\r\n        setText(event.target.value);\r\n    }\r\n\r\n    \r\n    return(\r\n        <>\r\n            <div className=\"container my-3\">\r\n                <div className=\"mb-3\">\r\n                <h5>{props.heading}</h5>\r\n                    <textarea className=\"form-control\" value = {text} placeholder=\"Enter your text here!\" style={{backgroundColor:props.theme==='dark'?'#1B2631':'white', color:props.theme==='dark'?'white':'black'}} onChange={updateText} id=\"TextBox\" rows=\"10\"></textarea>\r\n                </div>\r\n                <button className={`btn btn-${props.btnClr} mx-1`} onClick={ConvertToUppercase}>Convert to Uppercase</button>\r\n                <button className={`btn btn-${props.btnClr} mx-1`} onClick={ConvertToLowercase}>Convert to Uppercase</button>\r\n                <button className={`btn btn-${props.btnClr} mx-1`} onClick={Copy_Text}>Copy Text</button>\r\n                <button className={`btn btn-${props.btnClr} mx-1`} onClick={RemoveExtraSpace}>Remove Extra Space</button>\r\n                <button className={`btn btn-${props.btnClr} mx-1`} onClick={clearText}>Clear Text</button>\r\n            </div>\r\n            <div className=\"container\">\r\n                <h5>Text Summary</h5>\r\n                <p>{text.split(\" \").length} words, {text.length} characters</p>\r\n                <p>{0.008*text.split(\" \").length}s to read the full text</p>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    \r\n    const capitalize = (word)=>{\r\n        let lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n      }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type}`} role=\"alert\">\r\n            {capitalize(props.alert.type)} : {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport React, {useState} from 'react'\n\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n   const [theme, setTheme] = useState(\"info\");   // info is color code for light theme i.e. cyan color\n   const [alert, setAlert] = useState(null);\n   \n   const showAlert = (type, message)=>{\n     setAlert({\n       type: type,\n       msg: message\n     })\n     setTimeout(() => {\n       setAlert(null)\n     }, 1500);\n   }\n\n   const [btnClr, setBtnClr] = useState(\"info\");\n\n   const changeTheme = ()=>{\n    if(theme === \"info\")\n    {\n      setTheme(\"dark\");\n      document.body.style.backgroundColor = '#212F3C';\n      document.body.style.color = 'white';\n      setBtnClr(\"dark\");\n      // showAlert(\"success\", \"dark theme is enabled\");\n    }\n    else\n    {\n      setTheme(\"info\");\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      setBtnClr(\"info\");\n      // showAlert(\"success\", \"light theme is enabled\");\n    }\n  }\n\n\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"Text App\" about=\"About\" changeTheme={changeTheme} theme={theme} btnClr={btnClr} />\n        <Alert alert={alert}/>\n        <div className=\"container\">\n          {/* <Routes>\n            <Route exact path=\"/about\" element={<About theme={theme}/>}/> */}\n            {/* <Route path=\"/\" element={<TextForm heading=\"Please Enter the Text\" theme={theme} btnClr={btnClr} showAlert={showAlert}/>}/> */}\n            <TextForm heading=\"Please Enter the Text\" theme={theme} btnClr={btnClr} showAlert={showAlert}/>\n          {/* </Routes> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}